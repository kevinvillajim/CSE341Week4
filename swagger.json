{
	"swagger": "2.0",
	"info": {
		"title": "Items and Users API",
		"description": "API for managing items and users with OAuth authentication",
		"version": "1.0.0"
	},
	"host": "cse341week4.onrender.com",
	"basePath": "/api",
	"schemes": ["https"],
	"securityDefinitions": {
		"apiKeyAuth": {
			"type": "apiKey",
			"in": "header",
			"name": "X-API-Key",
			"description": "API key para acceder a los endpoints protegidos"
		}
	},
	"tags": [
		{
			"name": "Items",
			"description": "Operations related to items management"
		},
		{
			"name": "Users",
			"description": "Operations related to users management"
		},
		{
			"name": "Authentication",
			"description": "Operations related to authentication"
		}
	],
	"paths": {
		"/auth/github": {
			"get": {
				"tags": ["Authentication"],
				"summary": "GitHub OAuth Login",
				"description": "Redirects to GitHub for authentication",
				"responses": {
					"302": {
						"description": "Redirects to GitHub"
					}
				}
			}
		},
		"/auth/status": {
			"get": {
				"tags": ["Authentication"],
				"summary": "Check authentication status",
				"description": "Returns the current authentication status and user info if authenticated",
				"responses": {
					"200": {
						"description": "Authentication status"
					}
				}
			}
		},
		"/auth/logout": {
			"get": {
				"tags": ["Authentication"],
				"summary": "Logout",
				"description": "Logs out the current user",
				"responses": {
					"200": {
						"description": "Successfully logged out"
					}
				}
			}
		},
		"/auth/token": {
			"get": {
				"tags": ["Authentication"],
				"summary": "Generate API token",
				"description": "Generates a new API token for the authenticated user",
				"security": [
				],
				"responses": {
					"200": {
						"description": "API token generated successfully",
						"schema": {
							"type": "object",
							"properties": {
								"message": {"type": "string"},
								"token": {"type": "string"},
								"userId": {"type": "string"}
							}
						}
					},
					"401": {
						"description": "Unauthorized - Must be logged in"
					},
					"500": {
						"description": "Server error"
					}
				}
			}
		},
		"/auth/check-token": {
			"get": {
				"tags": ["Authentication"],
				"summary": "Check API token validity",
				"description": "Verifies if an API token is valid",
				"parameters": [
					{
						"in": "header",
						"name": "X-API-Key",
						"description": "API token to validate",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Token is valid",
						"schema": {
							"type": "object",
							"properties": {
								"valid": {"type": "boolean", "example": true},
								"userId": {"type": "string"}
							}
						}
					},
					"400": {
						"description": "No token provided",
						"schema": {
							"type": "object",
							"properties": {
								"valid": {"type": "boolean", "example": false},
								"message": {"type": "string"}
							}
						}
					},
					"401": {
						"description": "Invalid or expired token",
						"schema": {
							"type": "object",
							"properties": {
								"valid": {"type": "boolean", "example": false},
								"message": {"type": "string"}
							}
						}
					}
				}
			}
		},
		"/items": {
			"get": {
				"tags": ["Items"],
				"summary": "Get all items",
				"description": "Retrieves a list of all items",
				"responses": {
					"200": {
						"description": "List of items successfully obtained",
						"schema": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"_id": {"type": "string"},
									"name": {"type": "string"},
									"description": {"type": "string"},
									"price": {"type": "number"},
									"quantity": {"type": "integer"},
									"userId": {"type": "string"}
								}
							}
						}
					},
					"500": {
						"description": "Server error"
					}
				}
			},
			"post": {
				"tags": ["Items"],
				"summary": "Create a new item",
				"description": "Creates a new item in the database. Requires authentication via session cookie or API key.",
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "X-API-Key",
						"description": "API Key for authentication (alternative to session cookie)",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Data of the item to create",
						"required": true,
						"schema": {
							"type": "object",
							"required": ["name", "description"],
							"properties": {
								"name": {"type": "string"},
								"description": {"type": "string"},
								"price": {"type": "number"},
								"quantity": {"type": "integer"},
								"userId": {
									"type": "string",
									"description": "ID of the owner user (optional)"
								}
							}
						}
					}
				],
				"responses": {
					"201": {
						"description": "Item successfully created"
					},
					"400": {
						"description": "Invalid input data"
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"500": {
						"description": "Server error"
					}
				}
			}
		},
		"/items/{id}": {
			"get": {
				"tags": ["Items"],
				"summary": "Get an item by ID",
				"description": "Gets the details of a specific item by its ID",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "ID of the item to get"
					}
				],
				"responses": {
					"200": {
						"description": "Item successfully obtained",
						"schema": {
							"type": "object",
							"properties": {
								"_id": {"type": "string"},
								"name": {"type": "string"},
								"description": {"type": "string"},
								"price": {"type": "number"},
								"quantity": {"type": "integer"},
								"userId": {"type": "string"}
							}
						}
					},
					"404": {
						"description": "Item not found"
					},
					"500": {
						"description": "Server error"
					}
				}
			},
			"put": {
				"tags": ["Items"],
				"summary": "Update an item",
				"description": "Updates an existing item by its ID. Requires authentication via session cookie or API key.",
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "ID of the item to update"
					},
					{
						"in": "header",
						"name": "X-API-Key",
						"description": "API Key for authentication (alternative to session cookie)",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Data of the item to update",
						"required": true,
						"schema": {
							"type": "object",
							"required": ["name", "description"],
							"properties": {
								"name": {"type": "string"},
								"description": {"type": "string"},
								"price": {"type": "number"},
								"quantity": {"type": "integer"},
								"userId": {"type": "string"}
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "Item successfully updated"
					},
					"400": {
						"description": "Invalid input data"
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"404": {
						"description": "Item not found"
					},
					"500": {
						"description": "Server error"
					}
				}
			},
			"delete": {
				"tags": ["Items"],
				"summary": "Delete an item",
				"description": "Deletes an existing item by its ID. Requires authentication via session cookie or API key.",
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "ID of the item to delete"
					},
					{
						"in": "header",
						"name": "X-API-Key",
						"description": "API Key for authentication (alternative to session cookie)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Item successfully deleted"
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"404": {
						"description": "Item not found"
					},
					"500": {
						"description": "Server error"
					}
				}
			}
		},
		"/users": {
			"get": {
				"tags": ["Users"],
				"summary": "Get all users",
				"description": "Retrieves a list of all users",
				"responses": {
					"200": {
						"description": "List of users successfully obtained",
						"schema": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"_id": {"type": "string"},
									"username": {"type": "string"},
									"email": {"type": "string"}
								}
							}
						}
					},
					"500": {
						"description": "Server error"
					}
				}
			},
			"post": {
				"tags": ["Users"],
				"summary": "Create a new user",
				"description": "Creates a new user in the database. Requires authentication via session cookie or API key.",
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"in": "header",
						"name": "X-API-Key",
						"description": "API Key for authentication (alternative to session cookie)",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Data of the user to create",
						"required": true,
						"schema": {
							"type": "object",
							"required": ["username", "email"],
							"properties": {
								"username": {"type": "string"},
								"email": {"type": "string"},
								"firstName": {"type": "string"},
								"lastName": {"type": "string"},
								"phone": {"type": "string"}
							}
						}
					}
				],
				"responses": {
					"201": {
						"description": "User successfully created"
					},
					"400": {
						"description": "Invalid input data"
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"500": {
						"description": "Server error"
					}
				}
			}
		},
		"/users/{id}": {
			"get": {
				"tags": ["Users"],
				"summary": "Get a user by ID",
				"description": "Gets the details of a specific user by its ID",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "ID of the user to get"
					}
				],
				"responses": {
					"200": {
						"description": "User successfully obtained",
						"schema": {
							"type": "object",
							"properties": {
								"_id": {"type": "string"},
								"username": {"type": "string"},
								"email": {"type": "string"},
								"firstName": {"type": "string"},
								"lastName": {"type": "string"},
								"phone": {"type": "string"},
								"createdAt": {"type": "string"}
							}
						}
					},
					"404": {
						"description": "User not found"
					},
					"500": {
						"description": "Server error"
					}
				}
			},
			"put": {
				"tags": ["Users"],
				"summary": "Update a user",
				"description": "Updates an existing user by its ID. Requires authentication via session cookie or API key.",
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "ID of the user to update"
					},
					{
						"in": "header",
						"name": "X-API-Key",
						"description": "API Key for authentication (alternative to session cookie)",
						"required": false,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Data of the user to update",
						"required": true,
						"schema": {
							"type": "object",
							"required": ["username", "email"],
							"properties": {
								"username": {"type": "string"},
								"email": {"type": "string"},
								"firstName": {"type": "string"},
								"lastName": {"type": "string"},
								"phone": {"type": "string"}
							}
						}
					}
				],
				"responses": {
					"200": {
						"description": "User successfully updated"
					},
					"400": {
						"description": "Invalid input data"
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"404": {
						"description": "User not found"
					},
					"500": {
						"description": "Server error"
					}
				}
			},
			"delete": {
				"tags": ["Users"],
				"summary": "Delete a user",
				"description": "Deletes an existing user by its ID. Requires authentication via API key.",
				"security": [
					{
						"apiKeyAuth": []
					}
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "ID of the user to delete"
					},
					{
						"in": "header",
						"name": "X-API-Key",
						"description": "API Key for authentication (alternative to session cookie)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "User successfully deleted"
					},
					"401": {
						"description": "Unauthorized - Authentication required"
					},
					"404": {
						"description": "User not found"
					},
					"500": {
						"description": "Server error"
					}
				}
			}
		},
		"/users/{id}/items": {
			"get": {
				"tags": ["Users"],
				"summary": "Get a user's items",
				"description": "Retrieves all items associated with a specific user",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"type": "string",
						"description": "ID of the user"
					}
				],
				"responses": {
					"200": {
						"description": "User's items list successfully obtained",
						"schema": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"_id": {"type": "string"},
									"name": {"type": "string"},
									"description": {"type": "string"},
									"price": {"type": "number"},
									"quantity": {"type": "integer"},
									"userId": {"type": "string"}
								}
							}
						}
					},
					"404": {
						"description": "User not found"
					},
					"500": {
						"description": "Server error"
					}
				}
			}
		}
	}
}
